name: Install Dependencies
description: Install a Node project dependencies in a cache-optimized way with the package manager used by the project.
inputs:
  ignore-scripts:
    description: Default false. Learn more at https://pnpm.io/cli/install#--ignore-scripts.
    required: false
    default: 'false'
  pnpm-install-command: 
    description: The pnpm command to run to install the dependencies.
    required: false
    default: 'automatic'
  postinstall:
    description: Always run postinstall, even on cache hits. By default will run if that npm script is present in the package.json file.
    required: false
    default: 'true'
runs:
  using: composite
  steps:
    - name: Setup Corepack
      shell: bash
      run: corepack enable
    - name: Detect Package Manager
      id: detect-package-manager
      shell: bash
      run: |
        if stat pnpm-lock.yaml; then
          echo "PnPM version is $(pnpm --version)"
          package_manager='pnpm'
        else
          echo "Yarn version is $(yarn --version)"
          package_manager='yarn'
        fi
        echo "::set-output name=package_manager::$package_manager"

    #=====
    # PnPM
    #=====

    # TODO Doesn't seem to pick up the packageManager field from package.json
    # https://github.com/pnpm/action-setup#use-cache-to-reduce-installation-time
    # - uses: pnpm/action-setup@v2.0.1
    #   if: steps.detect-package-manager.outputs.package_manager == 'pnpm'
    #   name: Install PnPM
    #   id: pnpm-install
    #   with:
    #     run_install: false
    - name: Get PnPM Store Directory
      if: steps.detect-package-manager.outputs.package_manager == 'pnpm'
      id: pnpm-store
      shell: bash
      run: echo "::set-output name=path::$(pnpm store path)"
    - uses: actions/cache@v3
      if: steps.detect-package-manager.outputs.package_manager == 'pnpm'
      id: pnpm-cache
      name: Setup PnPM Cache
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    - name: Install Dependencies
      if: inputs.pnpm-install-command != 'automatic'
      shell: bash
      run: |
        ${{inputs.pnpm-install-command}}'
    - name: Install Dependencies
      if: steps.detect-package-manager.outputs.package_manager == 'pnpm' && inputs.pnpm-install-command == 'automatic'
      shell: bash
      run: |
        if [ '${{inputs.ignore-scripts}}' == 'true' ]; then
          pnpm install --ignore-scripts
        else
          pnpm install
        fi


    #=====
    # Yarn
    #=====

    - name: Cache node_modules
      if: steps.detect-package-manager.outputs.package_manager == 'yarn'
      uses: actions/cache@v3
      id: yarn-cache
      with:
        path: |
          **/node_modules
        key: yarn-cache-${{runner.os}}-${{ hashFiles('**/yarn.lock') }}
    - name: Install Dependencies
      if: steps.detect-package-manager.outputs.package_manager == 'yarn' && steps.yarn-cache.outputs.cache-hit != 'true'
      shell: bash
      run: corepack enable && yarn install --immutable
    - name: Postinstall
      if: steps.detect-package-manager.outputs.package_manager == 'yarn' && inputs.postinstall == 'true'
      shell: bash
      run: |
        if cat package.json | grep '"postinstall":' > /dev/null; then
          yarn run postinstall
        else
          echo "Skipping, no postinstall script to execute."
        fi
